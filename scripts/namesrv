#!/bin/sh
# Copyright 2017 luoji

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.   


# OPTIONS:
#   -f: start in foreground
#   -p <filename>: log the pid to a file (useful to kill it later, default namesrv.pid)
#   -c <filename>: namesrv config file (default etc/namesrv.toml)
#   -v: print version string and exit

# CONTROLLING STARTUP:
#
# This script relies on few environment variables to determine startup
# behavior, those variables are:
#
#   BOLTMQ_HOME -- BoltMQ Home containing everything necessary to run.
#
# NB: Developers should be aware that this script should remain compatible with
# POSIX sh and Solaris sh. This means, in particular, no $(( )) and no $( ).
curdir="$(cd `dirname $0`; pwd)" 
service_name=namesrv
launch_service_bin=$curdir/service/${service_name}d
isstartup="y"

launch_service()
{
    pidpath="$1"
    foreground="$2"
    cfgpath="$3"

    if [ "x$pidpath" == "x" ]; then
        pidpath="$curdir/$service_name.pid"
    fi

    if [ "x$cfgpath" == "x" ]; then
        cfgpath="$curdir/etc/$service_name.toml"
    fi

    $launch_service_bin "$foreground -c $cfgpath -p $pidpath" 
    echo "$service_name startup, please wait a few minutes."

    return $?
}

stop_service()
{
    pid="`ps aux | grep ${service_name}d | grep -v grep | awk '{print $2}'`"
    if [ "x$pid" == "x" ] ; then
        echo "$service_name stop already."
        return $?
    fi

    kill "$pid"
    echo "kill $service_name, please wait a few minutes."
    return $?
}

status_service()
{
    pid="`ps aux | grep ${service_name}d | grep -v grep | awk '{print $2}'`"
    if [ "x$pid" == "x" ] ; then
        echo "$service_name is down."
        return $?
    fi

    pidlog=`ps -p $pid | grep $pid`
    if [ "x$pidlog" != "x" ] ; then
        echo "$service_name is running. ($pid)"
    else
        echo "$service_name is down."
    fi

    return $?
}

while true; do
    case "$1" in
        -p)
            pidfile="$2"
            shift 2
        ;;
        -f)
            foreground="-f"
            shift
        ;;
        -h)
            echo "Usage: $0 [-f] [-h] [-p pidfile] [-c configfile]"
            exit 0
        ;;
        -c)
            cfgfile="$2"
            shift 2
        ;;
        -v)
            $launch_service_bin -v
            exit 0
        ;;
        start)
            isstartup="y"
            shift
        ;;
        stop)
            isstartup="n"
            shift
        ;;
        status)
            status_service
            exit 0
        ;;
        --)
            shift
            if [ "x$*" != "x" ] ; then
                echo "Error parsing arguments! Unknown argument \"$*\"" >&2
                exit 1
            fi
            break
        ;;
        *)
            if [ "x$*" != "x" ] ; then
                echo "Error parsing arguments! Unknown argument \"$1\"" >&2
                exit 1
            fi
            break
        ;;
    esac
done

if [ "x$isstartup" != "xy" ] ; then
    # Stop the service
    stop_service
else
    # Start up the service
    launch_service "$pidfile" "$foreground" "$cfgfile"
fi

