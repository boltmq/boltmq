// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: remoting_command.go
// DO NOT EDIT!

package protocol

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *RemotingCommand) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *RemotingCommand) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "code":`)
	fflib.FormatBits2(buf, uint64(j.Code), 10, j.Code < 0)
	buf.WriteString(`,"language":`)
	fflib.WriteJsonString(buf, string(j.Language))
	buf.WriteString(`,"version":`)
	fflib.FormatBits2(buf, uint64(j.Version), 10, j.Version < 0)
	buf.WriteString(`,"opaque":`)
	fflib.FormatBits2(buf, uint64(j.Opaque), 10, j.Opaque < 0)
	buf.WriteString(`,"flag":`)
	fflib.FormatBits2(buf, uint64(j.Flag), 10, j.Flag < 0)
	buf.WriteString(`,"remark":`)
	fflib.WriteJsonString(buf, string(j.Remark))
	if j.ExtFields == nil {
		buf.WriteString(`,"extFields":null`)
	} else {
		buf.WriteString(`,"extFields":{ `)
		for key, value := range j.ExtFields {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte(',')
	if j.CustomHeader != nil {
		buf.WriteString(`"commandCustomHeader":`)
		/* Interface types must use runtime reflection. type=protocol.CommandCustomHeader kind=interface */
		err = buf.Encode(j.CustomHeader)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtRemotingCommandbase = iota
	ffjtRemotingCommandnosuchkey

	ffjtRemotingCommandCode

	ffjtRemotingCommandLanguage

	ffjtRemotingCommandVersion

	ffjtRemotingCommandOpaque

	ffjtRemotingCommandFlag

	ffjtRemotingCommandRemark

	ffjtRemotingCommandExtFields

	ffjtRemotingCommandCustomHeader
)

var ffjKeyRemotingCommandCode = []byte("code")

var ffjKeyRemotingCommandLanguage = []byte("language")

var ffjKeyRemotingCommandVersion = []byte("version")

var ffjKeyRemotingCommandOpaque = []byte("opaque")

var ffjKeyRemotingCommandFlag = []byte("flag")

var ffjKeyRemotingCommandRemark = []byte("remark")

var ffjKeyRemotingCommandExtFields = []byte("extFields")

var ffjKeyRemotingCommandCustomHeader = []byte("commandCustomHeader")

// UnmarshalJSON umarshall json - template of ffjson
func (j *RemotingCommand) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *RemotingCommand) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtRemotingCommandbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtRemotingCommandnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyRemotingCommandCode, kn) {
						currentKey = ffjtRemotingCommandCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRemotingCommandCustomHeader, kn) {
						currentKey = ffjtRemotingCommandCustomHeader
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyRemotingCommandExtFields, kn) {
						currentKey = ffjtRemotingCommandExtFields
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffjKeyRemotingCommandFlag, kn) {
						currentKey = ffjtRemotingCommandFlag
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyRemotingCommandLanguage, kn) {
						currentKey = ffjtRemotingCommandLanguage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyRemotingCommandOpaque, kn) {
						currentKey = ffjtRemotingCommandOpaque
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyRemotingCommandRemark, kn) {
						currentKey = ffjtRemotingCommandRemark
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeyRemotingCommandVersion, kn) {
						currentKey = ffjtRemotingCommandVersion
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyRemotingCommandCustomHeader, kn) {
					currentKey = ffjtRemotingCommandCustomHeader
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRemotingCommandExtFields, kn) {
					currentKey = ffjtRemotingCommandExtFields
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRemotingCommandRemark, kn) {
					currentKey = ffjtRemotingCommandRemark
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyRemotingCommandFlag, kn) {
					currentKey = ffjtRemotingCommandFlag
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyRemotingCommandOpaque, kn) {
					currentKey = ffjtRemotingCommandOpaque
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRemotingCommandVersion, kn) {
					currentKey = ffjtRemotingCommandVersion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyRemotingCommandLanguage, kn) {
					currentKey = ffjtRemotingCommandLanguage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyRemotingCommandCode, kn) {
					currentKey = ffjtRemotingCommandCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtRemotingCommandnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtRemotingCommandCode:
					goto handle_Code

				case ffjtRemotingCommandLanguage:
					goto handle_Language

				case ffjtRemotingCommandVersion:
					goto handle_Version

				case ffjtRemotingCommandOpaque:
					goto handle_Opaque

				case ffjtRemotingCommandFlag:
					goto handle_Flag

				case ffjtRemotingCommandRemark:
					goto handle_Remark

				case ffjtRemotingCommandExtFields:
					goto handle_ExtFields

				case ffjtRemotingCommandCustomHeader:
					goto handle_CustomHeader

				case ffjtRemotingCommandnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Code:

	/* handler: j.Code type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Code = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Language:

	/* handler: j.Language type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Language = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Version:

	/* handler: j.Version type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Version = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Opaque:

	/* handler: j.Opaque type=int32 kind=int32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Opaque = int32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Flag:

	/* handler: j.Flag type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Flag = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Remark:

	/* handler: j.Remark type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Remark = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ExtFields:

	/* handler: j.ExtFields type=map[string]string kind=map quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_bracket && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.ExtFields = nil
		} else {

			j.ExtFields = make(map[string]string, 0)

			wantVal := true

			for {

				var k string

				var tmpJExtFields string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_bracket {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: k type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						k = string(string(outBuf))

					}
				}

				// Expect ':' after key
				tok = fs.Scan()
				if tok != fflib.FFTok_colon {
					return fs.WrapErr(fmt.Errorf("wanted colon token, but got token: %v", tok))
				}

				tok = fs.Scan()
				/* handler: tmpJExtFields type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJExtFields = string(string(outBuf))

					}
				}

				j.ExtFields[k] = tmpJExtFields

				wantVal = false
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CustomHeader:

	/* handler: j.CustomHeader type=protocol.CommandCustomHeader kind=interface quoted=false*/

	{
		/* Falling back. type=protocol.CommandCustomHeader kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.CustomHeader)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
